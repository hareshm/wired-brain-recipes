Pluralsight: Getting Started With Git 2

2: Get up and running with Git

Git help:
https://www.toolsqa.com/git/git-help

$ git help       (high level)
$ git help -a    (all commands)
git help <command name>   (specific command)
$ git help add

Front end: Git Bash - Mingw64 

https://stackoverflow.com/questions/51262422/git-man-command-dont-work

The Git for Windows package (aka Git Bash) does not include the Unix man command but you don't need it.

You can get help for any Git command by running git help <command-name> (for example, git help checkout).

Also, you can read the help online at https://git-scm.com/docs.

GitHub Repository (private):
hareshm/wired-brain-recipes
https://github.com/hareshm/wired-brain-recipes.git

…or push an existing repository from the command line

$ git add .   (HM: git add is used for both, a new file and for modified files)
$ git commit -m "first commit"  (HM: $git commit -a does the add & commit - see the picture in https://stackoverflow.com/questions/6143285/git-add-vs-push-vs-commit
$ git commit -a -m "add new vendor" (HM: this command replaces git add & git commit) 
$ git remote add origin https://github.com/hareshm/wired-brain-recipes.git
$ git push -u origin master
branch 'master' set up to track 'origin/master'.

3. Basic Commands of Everyday Git

$ git status
On branch master
Your branch is up to date with 'origin/master'.

3. Basic Commands of Everyday Git
3 stages of a file: Committed, Modified, Staged  (REM CMS)

$ touch vendors.txt
$ git status
On branch master
Your branch is up to date with 'origin/master'.

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   Git-Help.txt

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        vendors.txt

no changes added to commit (use "git add" and/or "git commit -a")

$ git add vendors.txt   ("git add" tells git that this file should be tracked).
$ git status
On branch master
Your branch is up to date with 'origin/master'.

Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        new file:   vendors.txt

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   Git-Help.txt

https://stackoverflow.com/questions/35811533/git-bash-bash-open-command-not-found

OSX - open is a universal opener in OSX   (Mac)
Linux - has xdg-open
Windows - use start

https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/start
https://petri.com/github-discontinue-atom-text-editor-december-15/
https://sourceforge.net/projects/atom.mirror/files/latest/download

$ start notepad employees.txt
$ start atom employees.txt
The system cannot find the file atom.

https://stackoverflow.com/questions/52245901/bash-atom-command-not-found-how-to-resolve-this-in-windows

Windows cmd:
C:\Users\hares>where atom
C:\Users\hares\AppData\Local\atom\bin\atom
C:\Users\hares\AppData\Local\atom\bin\atom.cmd

GitBash:
$ export PATH=${PATH}:C:\Users\hares\AppData\Local\atom\bin
This won't work, GitBash is Unix shell - needs Unix syntax fwd slash

$ echo $PATH
/c/Users/hares/bin:/mingw64/bin:/usr/local/bin:/usr/bin:/bin:/mingw64/bin:/usr/bin:/c/Users/hares/bin:/c/Python39/Scripts:/c/Python39:/c/Python38/Scripts:/c/Python38:/c/WINDOWS/system32:/c/WINDOWS:/c/WINDOWS/System32/Wbem:/c/WINDOWS/System32/WindowsPowerShell/v1.0:/c/WINDOWS/System32/OpenSSH:/c/Program Files/dotnet:/c/Program Files/Microsoft SQL Server/130/Tools/Binn:/c/Program Files/Microsoft SQL Server/Client SDK/ODBC/170/Tools/Binn:/c/ProgramData/chocolatey/bin:/c/Program Files/nodejs:/c/Program Files (x86)/Intel/Intel(R) Management Engine Components/DAL:/c/Program Files/Intel/Intel(R) Management Engine Components/DAL:/cmd:/c/Users/hares/AppData/Local/Microsoft/WindowsApps:/c/Users/hares/AppData/Local/Programs/Microsoft VS Code/bin:/c/Users/hares/AppData/Roaming/npm:/usr/bin/vendor_perl:/usr/bin/core_perl:C:UsersharesAppDataLocalatombin

C:\Users\hares\AppData\Local\atom\bin
/C/Users/hares/AppData/Local/atom/bin

$ export PATH=${PATH}:/C/Users/hares/AppData/Local/atom/bin
$ start atom employees.txt

There was no .bshrc file in C:\Users\hares
https://stackoverflow.com/questions/6883760/git-for-windows-bashrc-or-equivalent-configuration-files-for-git-bash-shell

$ touch ~/.bashrc
Added the line to .bashrc - export PATH=${PATH}:/C/Users/hares/AppData/Local/atom/bin

https://stackoverflow.com/questions/6143285/git-add-vs-push-vs-commit
git add adds files to the Git index, which is a staging area for objects prepared to be commited.
git commit commits the files in the index to the repository, git commit -a is a shortcut to add all the modified tracked files to the index first.
git push sends all the pending changes to the remote repository to which your branch is mapped (eg. on GitHub).

https://blog.osteele.com/2008/05/my-git-workflow/

$ git status -s
$ git status --short

Error: fatal: not a git repository (or any of the parent directories): .git
Fix: you need to run the git commands in the folder that has the .git folder - C:\Users\hares\Git\desktop\cafe_recipes

$ git diff --staged --no-renames
$ git push origin master   (HM origin: remote repository ; master: branch name)
$ git log (HM: command history)
$ git log -2  (HM: last 2 commands)
$ git log --oneline  (HM: same as git log, with 1 line per command in history)
$ git log --stat  (HM: detailed view of each commit, names of files like git status)
$ git log --patch (HM: The full diff of each file)

The seven rules of a great Git commit message
https://cbea.ms/git-commit/

$ git rm eggnog_latte  (HM: to remove a file from git)
$ git rm --cached irish_coffee  ( Git will stop tracking changes to the file, but not delete it from Git)
$ git mv README.md README  ( Unix mv command, aka renaming the file in Git)

http://git-school.github.io/visualizing-git/
git commit
git checkout -b new_branch

HEAD is a pointer to the branch we are on.  We can commit a change to any branch.  HEAD determines where the commit will go.  Head & Master are the same until you branch.  Then Head points to the new branch, and becomes different from Master.

$git checkout master (this causes HEAD to point back to Master)
$git checkout new_branch  (moves HEAD back to new_branch)

$ git add .  (adds irish_coffee back)
$ git stash  (stashes the add for retrieval later - like a shelveset.  You can ushelve - $ git stash pop)
$ git stash list (lists what's stashed)
$ git stash show  (like git stash show, but more details.

$ touch cold_brew  (same as ksh touch, bash is like ksh, more specifically, the Unix Bourne shell.  Bash is “Bourne Again SHell”)
$ atom .
$ git merge new_branch
$ git reset --mixed aa499a9   (resets commits back to staging/index area)
$ git add .
$ git commit -m "Group master and new_branch changes"

$ git push origin master

Clone url: github.com, click on Clone button

$ cd ..
$ git clone https://github.com/hareshm/wired-brain-recipes.git
Cloning into 'wired-brain-recipes'...
$ cd wired-brain-recipes
$ git status
$ ls























